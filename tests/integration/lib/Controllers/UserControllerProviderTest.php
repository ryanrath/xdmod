<?php

namespace IntegrationTests\Controllers;

use CCR\Json;
use Exception;
use stdClass;
use TestHarness\TokenHelper;
use TestHarness\Utilities;
use TestHarness\XdmodTestHelper;

class UserControllerProviderTest extends BaseUserAdminTest
{
    private $tokenHelper;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->tokenHelper = new TokenHelper(new XdmodTestHelper());
    }

    /**
     * Tests the UserControllerProvider route: GET /users/current
     *
     * @dataProvider provideGetCurrentUser
     *
     * @param array $options
     * @throws Exception if unable to authenticate as the specified user role.
     */
    public function testGetCurrentUser(array $options)
    {
        $user = $options['user'];
        $expected = $options['expected'];
        $expectedFile = $expected['file'];
        $expectedHttpCode = $expected['http_code'];
        $expectedContentType = $expected['content_type'];


        if ($user !== 'pub') {
            $this->helper->authenticate($user);
        }

        $response = $this->helper->get('rest/v1/users/current');

        $this->validateResponse($response, $expectedHttpCode, $expectedContentType);

        $expected = JSON::loadFile(
            $this->getTestFiles()->getFile('user_controller', $expectedFile)
        );

        $actual = $response[0];

        $this->assertEquals($expected, $actual);

        if ($user !== 'pub') {
            $this->helper->logout();
        }
    }

    /**
     * @dataProvider provideTestAPITokens
     * @param array $options
     * @return void
     * @throws Exception
     */
    public function testAPITokensCRD(array $options)
    {
        $hydratedOptions = $this->hydrateOptions($options, 'create_api_tokens');

        $user = $hydratedOptions->user;
        $expected = $hydratedOptions->expected;

        if ('pub' !== $user) {
            $this->tokenHelper->authenticate($user);
        }

        // Attempt to get the current API token, this should fail.
        $this->tokenHelper->getAPIToken(
            $expected->api_get->http_code,
            $expected->api_get->content_type,
            $expected->api_get->schemas->failure
        );

        // Attempt to create an API token.
        $this->tokenHelper->createAPIToken(
            $expected->api_create->http_code,
            $expected->api_create->content_type,
            $expected->api_create->schemas->success
        );

        // Now test that we can't create a token when we already have a valid token.
        $this->tokenHelper->createAPIToken(
            $expected->api_create->http_code,
            $expected->api_create->content_type,
            $expected->api_create->schemas->failure
        );

        // Now test if we can get the newly created token, this should succeed.
        $this->tokenHelper->getAPIToken(
            $expected->api_get->http_code,
            $expected->api_get->content_type,
            $expected->api_get->schemas->success
        );

        // Now we can revoke the token we just created.
        $this->tokenHelper->revokeAPIToken(
            $expected->api_revoke->http_code,
            $expected->api_revoke->content_type,
            $expected->api_revoke->schemas->success
        );

        // We cannot revoke a token if we don't have one.
        $this->tokenHelper->revokeAPIToken(
            $expected->api_revoke->http_code,
            $expected->api_revoke->content_type,
            $expected->api_revoke->schemas->failure
        );

        // We still can't get a token if we don't have one.
        $this->tokenHelper->getAPIToken(
            $expected->api_get->http_code,
            $expected->api_get->content_type,
            $expected->api_get->schemas->failure
        );

        if ('pub' !== $user) {
            $this->tokenHelper->logout();
        }
    }

    /**
     * @param array $options
     * @param string $testId the id of the test calling this function, will be used to retrieve the default test options
     * @return stdClass containing the provided options merged w/ token_auth_defaults and the defaults for $testId.
     * @throws Exception
     */
    protected function hydrateOptions(array $options, $testId)
    {
        $tokenAuthDefaults = Json::loadFile($this->getTestFiles()->getFile('user_controller', 'token_auth_defaults', 'input'), false);
        $testDefaults = Json::loadFile($this->getTestFiles()->getFile('user_controller', sprintf('%s_defaults', $testId), 'input'), false);

        $authedOptions = Utilities::applyDefaults(json_decode(json_encode($options)), $tokenAuthDefaults);
        return Utilities::applyDefaults($authedOptions, $testDefaults);
    }

    /**
     * @return array|object
     * @throws Exception
     */
    public function provideGetCurrentUser()
    {
        return JSON::loadFile(
            $this->getTestFiles()->getFile('user_controller', 'get_current_user-8.0.0', 'input')
        );
    }

    public function provideTestAPITokens()
    {
        return JSON::loadFile(
            $this->getTestFiles()->getFile('user_controller', 'create_api_tokens', 'input')
        );
    }
}
